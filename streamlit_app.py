import streamlit as st
import pandas as pd
from io import BytesIO

try:
    import altair as alt
    HAS_ALTAIR = True
except Exception:
    HAS_ALTAIR = False


# =============================
# CONFIGURA√á√ÉO DA P√ÅGINA
# =============================
st.set_page_config(
    page_title="In√≠cio ‚Äî Painel IDEB",
    page_icon="üìà",
    layout="wide",
)

# =============================
# CABE√áALHO / APRESENTA√á√ÉO (APENAS TEXTO)
# =============================
st.title("üìà Painel IDEB ‚Äì Rede Estadual/ES (por Munic√≠pio)")

st.markdown(
    """
    Esta aplica√ß√£o apresenta um MVP (Produto M√≠nimo Vi√°vel) como parte da avalia√ß√£o da disciplina de **Cloud Computing**
    para produtos de dados na P√≥s‚Äëgradua√ß√£o em **Minera√ß√£o de Dados**.

    - Professor: **Maxwell Monteiro**  
    - Aluna: **Luciene Dellaqua Bergamin**
    """
)

st.subheader("Objetivo do Projeto")
st.write(
    """
    Criar um painel de apresenta√ß√£o para explora√ß√£o do **IDEB (√çndice de Desenvolvimento da Educa√ß√£o B√°sica)** da rede 
    estadual do Esp√≠rito Santo, com foco em visualiza√ß√µes e compara√ß√µes **por munic√≠pio**. Este MVP n√£o carrega dados
    reais ‚Äî serve como base de estrutura para, futuramente, incluir upload de CSV, gr√°ficos e pain√©is anal√≠ticos.
    """
)

st.subheader("O que √© o IDEB (resumo)")
st.write(
    """
    O IDEB combina **aprendizado** (profici√™ncia medida pelo **Saeb**) e **fluxo escolar** (principalmente a **taxa de aprova√ß√£o**
    do Censo Escolar). De forma simplificada, o indicador reflete quanto os estudantes **aprendem** e **progridem** ao longo do tempo.
    √â divulgado bianualmente e pode ser analisado por **rede**, **munic√≠pio** e **escola**.
    """
)

st.subheader("Fontes dos Dados (apenas IDEB)")
st.write(
    """
    - **INEP / Saeb** ‚Äì Profici√™ncias em L√≠ngua Portuguesa e Matem√°tica utilizadas na composi√ß√£o do **IDEB**. 
    
    """
)

st.info("Navegue pelas se√ß√µes no menu √† esquerda para explorar a estrutura.")

# =============================
# NAVEGA√á√ÉO (PLACEHOLDERS)
# =============================
sec = st.sidebar.radio(
    "Se√ß√µes",
    [
        "In√≠cio",
        "Panorama IDEB",
        "Ranking de Munic√≠pios",
        "Evolu√ß√£o Temporal",
        "Comparador",
        "Metodologia & Fontes",
    ],
)

# =============================
# FUN√á√ïES DE CARGA (XLSX)
# =============================
@st.cache_data(show_spinner=False)
def load_xlsx_local(path: str, sheet_name=0) -> pd.DataFrame:
    # L√™ direto da raiz do reposit√≥rio
    return pd.read_excel(path, engine="openpyxl", sheet_name=sheet_name)

def coerce_numeric_cols(df: pd.DataFrame) -> pd.DataFrame:
    """
    Converte colunas object para num√©ricas apenas quando fizer sentido.
    - Ignora colunas claramente categ√≥ricas (ex.: NO_MUNICIPIO, REDE, SG_UF, UF, NOME, DESCRICAO).
    - S√≥ converte se >= 60% das c√©lulas virarem n√∫mero ap√≥s a tentativa.
    - Troca v√≠rgula por ponto antes de converter.
    """
    df = df.copy()

    # colunas que NUNCA vamos converter para n√∫mero
    never_numeric = []
    for c in df.columns:
        cl = c.lower()
        if any(k in cl for k in [
            "no_municipio", "munic√≠pio", "municipio",
            "rede", "sg_uf", "uf",
            "nome", "descricao", "descri√ß√£o", "desc"
        ]):
            never_numeric.append(c)

    for c in df.columns:
        if df[c].dtype == "object" and c not in never_numeric:
            s = df[c].astype(str).str.strip().replace({"": None})
            s = s.str.replace(",", ".", regex=False)

            parsed = pd.to_numeric(s, errors="coerce")
            ratio_numeric = parsed.notna().mean()

            # s√≥ converte se maioria virou n√∫mero
            if ratio_numeric >= 0.60:
                df[c] = parsed
            else:
                df[c] = df[c].astype(str)  # garante texto leg√≠vel

    return df

def detect_muni_col(df: pd.DataFrame) -> str:
    """Tenta descobrir a coluna de munic√≠pio."""
    candidates = [c for c in df.columns if any(k in c.lower() for k in ["muni", "munic√≠", "municipio"])]
    return candidates[0] if candidates else df.columns[0]

def ffill_text_cols(df: pd.DataFrame) -> pd.DataFrame:
    """
    Preenche para baixo (forward-fill) colunas textuais t√≠picas de planilhas agrupadas,
    como NO_MUNICIPIO, REDE, SG_UF. S√≥ preenche se a coluna existir.
    """
    df = df.copy()
    candidatos = ["NO_MUNICIPIO", "REDE", "SG_UF", "UF", "NOME_MUNICIPIO", "NM_MUNICIPIO"]
    for col in candidatos:
        if col in df.columns:
            df[col] = df[col].ffill()
    return df

# ===== NOVO: normaliza r√≥tulos de 'REDE' e permite filtrar =====
def normalize_rede(value):
    """Padroniza r√≥tulos de rede para facilitar o filtro."""
    if pd.isna(value):
        return value
    t = str(value).strip().lower()
    if t.startswith("estad"):   # estadual, ESTADUAL‚Ä¶
        return "Estadual"
    if t.startswith("munic") or t.startswith("p√∫bli") or t.startswith("publi"):
        return "Municipal/P√∫blica"
    if t.startswith("feder"):
        return "Federal"
    if t.startswith("priv"):
        return "Privada"
    return str(value).strip().title()
# ================================================================


# =============================
# SE√á√ÉO: IN√çCIO
# =============================
if sec == "In√≠cio":
    st.title("üìà Painel IDEB ‚Äì Rede Estadual/ES (por Munic√≠pio)")

    st.markdown(
        """
        Esta aplica√ß√£o apresenta um MVP (Produto M√≠nimo Vi√°vel) como parte da avalia√ß√£o da disciplina de **Cloud Computing**
        para produtos de dados na P√≥s-gradua√ß√£o em **Minera√ß√£o de Dados**.

        - Professor: **Maxwell Monteiro**  
        - Aluna: **Luciene Dellaqua Bergamin**
        """
    )

    st.subheader("Objetivo do Projeto")
    st.write(
        """
        Criar um painel de apresenta√ß√£o para explora√ß√£o do **IDEB (√çndice de Desenvolvimento da Educa√ß√£o B√°sica)** da rede 
        estadual do Esp√≠rito Santo, com foco em visualiza√ß√µes e compara√ß√µes **por munic√≠pio**.
        """
    )

    st.subheader("O que √© o IDEB (resumo)")
    st.write(
        """
        O IDEB combina **aprendizado** (profici√™ncia medida pelo **Saeb**) e **fluxo escolar** (principalmente a **taxa de aprova√ß√£o**
        do Censo Escolar). √â divulgado bianualmente e pode ser analisado por **rede**, **munic√≠pio** e **escola**.
        """
    )

    st.subheader("Fontes dos Dados (apenas IDEB e Censo Escolar)")
    st.write(
        """
        - **INEP / Saeb** ‚Äì Profici√™ncias em L√≠ngua Portuguesa e Matem√°tica utilizadas na composi√ß√£o do **IDEB**.  
        - **INEP / Censo Escolar (Situa√ß√£o do Aluno)** ‚Äì Indicadores de **aprova√ß√£o** que integram o **IDEB**.
        """
    )

# =============================
# SE√á√ÉO: PANORAMA IDEB
# =============================
elif sec == "Panorama IDEB":
    st.header("Panorama IDEB ‚Äì Ensino M√©dio (Munic√≠pios/ES)")

    try:
        df = load_xlsx_local("IDEB_ensino_medio_municipios_2023_ES.xlsx", sheet_name=0)
        st.success("Base `IDEB_ensino_medio_municipios_2023_ES.xlsx` carregada da raiz do reposit√≥rio.")
    except FileNotFoundError:
        st.error("Arquivo `IDEB_ensino_medio_municipios_2023_ES.xlsx` n√£o encontrado na raiz do reposit√≥rio.")
        st.stop()
    except Exception as e:
        st.error(f"N√£o foi poss√≠vel ler o Excel: {e}")
        st.stop()

    # normaliza cabe√ßalhos, tipa num√©ricos e preenche textos
    df.columns = [str(c).strip() for c in df.columns]
    df = coerce_numeric_cols(df)
    df = ffill_text_cols(df)

    # ===== NOVO: normaliza e filtra apenas REDE = 'Estadual'
    if "REDE" in df.columns:
        df["REDE"] = df["REDE"].map(normalize_rede)
        df = df[df["REDE"] == "Estadual"].copy()
    # ================================================

    # Pr√©via
    st.subheader("üîç Pr√©via da Tabela")
    st.dataframe(df.head(20), use_container_width=True)

    # (1) OBRIGAT√ìRIO: Tabela descritiva
    st.subheader("üìà Estat√≠sticas Descritivas (Pandas `describe()`)")
    desc = df.select_dtypes(include="number").describe().T
    st.dataframe(desc, use_container_width=True)

    # (2) Gr√°fico de barras
    st.subheader("üìä Gr√°fico de Barras ‚Äì munic√≠pios x m√©trica")
    muni_col = detect_muni_col(df)
    num_cols = df.select_dtypes(include="number").columns.tolist()
    if not num_cols:
        st.error("N√£o h√° colunas num√©ricas para plotar.")
        st.stop()

    col_cat = st.selectbox("Coluna categ√≥rica (X):", df.columns, index=list(df.columns).index(muni_col))
    sugestoes = [c for c in num_cols if any(k in c.lower() for k in ["ideb", "nota", "√≠ndice", "indice", "profici", "aprova"])]
    y_default = sugestoes[0] if sugestoes else num_cols[0]
    col_y = st.selectbox("M√©trica (Y):", num_cols, index=num_cols.index(y_default))
    n_top = st.slider("Quantidade de munic√≠pios (Top N):", 5, min(30, len(df)), min(15, len(df)))

    base = (
        df[[col_cat, col_y]]
        .dropna()
        .assign(**{col_cat: lambda d: d[col_cat].astype(str)})
        .sort_values(col_y, ascending=False)
        .head(n_top)
    )

    if HAS_ALTAIR:
        chart = (
            alt.Chart(base)
            .mark_bar()
            .encode(
                x=alt.X(f"{col_cat}:N", sort='-y', axis=alt.Axis(labelAngle=-40, title=col_cat)),
                y=alt.Y(f"{col_y}:Q", title=col_y),
                tooltip=[col_cat, col_y],
            )
            .properties(height=420)
        )
        st.altair_chart(chart, use_container_width=True)
    else:
        st.bar_chart(base, x=col_cat, y=col_y)

    with st.expander("Ver dados do gr√°fico"):
        st.dataframe(base, use_container_width=True)

    st.caption("‚úî Requisitos do MVP atendidos: `describe()` + 1 gr√°fico.")

# =============================
# SE√á√ÉO: RANKING DE MUNIC√çPIOS
# =============================
elif sec == "Ranking de Munic√≠pios":
    st.header("üèÜ Ranking de Munic√≠pios ‚Äî Ensino M√©dio (ES)")

    try:
        df = load_xlsx_local("IDEB_ensino_medio_municipios_2023_ES.xlsx", sheet_name=0)
    except Exception as e:
        st.error(f"N√£o foi poss√≠vel abrir o Excel: {e}")
        st.stop()

    df.columns = [str(c).strip() for c in df.columns]
    df = coerce_numeric_cols(df)
    df = ffill_text_cols(df)

    # ===== NOVO: normaliza e filtra apenas REDE = 'Estadual'
    if "REDE" in df.columns:
        df["REDE"] = df["REDE"].map(normalize_rede)
        df = df[df["REDE"] == "Estadual"].copy()
    # ================================================

    muni_col = detect_muni_col(df)
    num_cols = df.select_dtypes(include="number").columns.tolist()
    if not num_cols:
        st.error("A base n√£o possui colunas num√©ricas para ranquear.")
        st.stop()

    sugestoes = [c for c in num_cols if any(k in c.lower() for k in ["ideb", "nota", "√≠ndice", "indice", "profici", "aprova"])]
    metrica_default = sugestoes[0] if sugestoes else num_cols[0]

    with st.sidebar:
        st.markdown("### ‚öôÔ∏è Op√ß√µes do Ranking")
        metrica = st.selectbox("M√©trica:", num_cols, index=num_cols.index(metrica_default))
        ordem = st.radio("Ordena√ß√£o:", ["Maior ‚Üí Menor", "Menor ‚Üí Maior"], index=0, horizontal=True)
        topn = st.slider("Top N", min_value=5, max_value=min(100, len(df)), value=min(20, len(df)))
        termo = st.text_input("Filtrar por nome do munic√≠pio (opcional)")

    base = df[[muni_col, metrica]].dropna().copy()
    base[muni_col] = base[muni_col].astype(str)
    if termo.strip():
        base = base[base[muni_col].str.contains(termo.strip(), case=False, na=False)]

    asc = (ordem == "Menor ‚Üí Maior")
    base = base.sort_values(metrica, ascending=asc, kind="mergesort")
    base["Posi√ß√£o"] = range(1, len(base) + 1)
    ranking = base[["Posi√ß√£o", muni_col, metrica]].head(topn)

    st.subheader("üìã Tabela do Ranking")
    st.dataframe(ranking.reset_index(drop=True), use_container_width=True)

    csv = ranking.to_csv(index=False).encode("utf-8")
    st.download_button("‚¨áÔ∏è Baixar ranking (CSV)", data=csv,
                       file_name=f"ranking_municipios_{metrica}.csv", mime="text/csv")

    st.subheader("üìä Top N ‚Äî Gr√°fico de Barras")
    gdf = ranking.rename(columns={muni_col: "Munic√≠pio"})
    gdf["Munic√≠pio"] = gdf["Munic√≠pio"].astype(str)

    if HAS_ALTAIR:
        chart = (
            alt.Chart(gdf)
            .mark_bar()
            .encode(
                x=alt.X("Munic√≠pio:N", sort='-y', axis=alt.Axis(labelAngle=-40)),
                y=alt.Y(f"{metrica}:Q"),
                tooltip=["Posi√ß√£o", "Munic√≠pio", metrica],
            )
            .properties(height=420)
        )
        st.altair_chart(chart, use_container_width=True)
    else:
        st.bar_chart(gdf, x="Munic√≠pio", y=metrica)

    st.caption("Dica: ajuste a m√©trica, a ordena√ß√£o e use o filtro para localizar um munic√≠pio.")

# =============================
# PLACEHOLDERS
# =============================
elif sec == "Comparador":
    st.header("Comparador")
    st.info("Em constru√ß√£o.")



elif sec == "Metodologia & Fontes":
    st.header("Metodologia & Fontes")
    st.info("Em constru√ß√£o.")